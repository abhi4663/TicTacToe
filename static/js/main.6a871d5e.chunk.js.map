{"version":3,"sources":["components/AppHeader.js","components/BoardCell.js","components/TicTacToeGame.js","components/TicTacToeBoard.js","components/InputPlayer.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["AppHeader","className","Cell","id1","id2","props","style","color","value","onWinner","id","backgroundColor","onClick","onCellClick","TicTacToeBoard","this","cells","map","index","handle","win","array","React","Component","InputPlayer","handleChange","e","setState","player","target","state","label","type","onChange","required","handleName","Timer","border","heigth","width","textAlign","margin","top","borderRadius","value1","value2","MyTable","data","row","position","next","player1","player2","serialNum","values","TicTacToeGame","handleCellClick","currentValue","GetWinner","tableData","push","filter","cell","length","stopTimer2","startTimer1","stopTimer1","startTimer2","newCells","newNext","reset","isGame","updatePlayer","name","console","log","renderInput","renderContent","status","playerName1","playerName2","setInterval","document","getElementById","innerHTML","clearInterval","cellArray","entry","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.6a871d5e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction AppHeader() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Tic Tac Toe Game</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppHeader;\r\n","//import React from 'react'\r\nimport React from \"react\";\r\n\r\nfunction Cell(props) {\r\n  //let value='_';\r\n\r\n  let style = {\r\n    color: props.value ? \"black\" : \"transparent\",\r\n  };\r\n  let value = props.value || \"_\";\r\n\r\n  if (props.onWinner) {\r\n    for (let index of props.onWinner) {\r\n      if (index === props.id) {\r\n        style = {\r\n          backgroundColor: \"yellow\",\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={() => props.onCellClick(props.id)}\r\n      style={style}\r\n      className=\"cell\"\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport TicTacToeBoard from './TicTacToeBoard';\r\nimport InputPlayer from './InputPlayer';\r\nimport Timer from './Timer';\r\nimport './style.css';\r\n\r\nlet value1 = 0,\r\n  value2 = 0,\r\n  id1,\r\n  id2;\r\nclass TicTacToeGame extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player1: 'X',\r\n      player2: 'O',\r\n      isGame: false,\r\n      tableData: [],\r\n      next: 'X',\r\n      cells: [null, null, null, null, null, null, null, null, null],\r\n    };\r\n  }\r\n  GetWinner(cellArray) {\r\n    let array = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let entry of array) {\r\n      if (\r\n        cellArray[entry[0]] &&\r\n        cellArray[entry[1]] === cellArray[entry[0]] &&\r\n        cellArray[entry[1]] === cellArray[entry[2]]\r\n      ) {\r\n        return { status: cellArray[entry[0]], array: entry };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleCellClick = (id) => {\r\n    let currentValue = this.state.cells[id];\r\n    if (this.GetWinner(this.state.cells) || currentValue) return;\r\n    this.state.tableData.push({\r\n      next: this.state.next,\r\n      serialNum: id + 1,\r\n      position: this.state.cells.filter((cell) => cell !== null).length + 1,\r\n      player1: this.state.player1,\r\n      player2: this.state.player2,\r\n    });\r\n    if (this.state.next === 'X') {\r\n      this.stopTimer2();\r\n      this.startTimer1();\r\n    }\r\n    if (this.state.next === 'O') {\r\n      this.stopTimer1();\r\n      this.startTimer2();\r\n    }\r\n    let newCells = [...this.state.cells];\r\n    newCells[id] = this.state.next;\r\n\r\n    let newNext = this.state.next === 'O' ? 'X' : 'O';\r\n\r\n    this.setState({ cells: newCells, next: newNext });\r\n  };\r\n\r\n  reset = () => {\r\n    this.stopTimer1();\r\n    this.stopTimer2();\r\n    this.setState({\r\n      tableData: [],\r\n      isGame: false,\r\n      next: 'X',\r\n      cells: [null, null, null, null, null, null, null, null, null],\r\n    });\r\n  };\r\n  updatePlayer = (name, label) => {\r\n    if (label === 'Player1') this.setState({ player1: name });\r\n    else this.setState({ player2: name });\r\n    console.log(this.state);\r\n  };\r\n  renderInput = () => {\r\n    return (\r\n      <div className=\"inputDiv\">\r\n        <br />\r\n        <InputPlayer value=\"X\" handleName={this.updatePlayer} label=\"Player1\" />\r\n\r\n        <InputPlayer value=\"O\" handleName={this.updatePlayer} label=\"Player2\" />\r\n\r\n        <button id=\"button1\" onClick={() => this.setState({ isGame: true })}>\r\n          start\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  renderContent = () => {\r\n    let status;\r\n\r\n    let win;\r\n    if (\r\n      this.state.cells.filter((cell) => cell !== null).length ===\r\n        this.state.cells.length &&\r\n      !this.GetWinner(this.state.cells) //no cell is empty or winner state\r\n    ) {\r\n      status = 'Draw';\r\n      this.stopTimer1();\r\n      this.stopTimer2();\r\n    } else {\r\n      win = this.GetWinner(this.state.cells);\r\n      if (win) {\r\n        let winner =\r\n          win.status === 'X' ? this.state.player1 : this.state.player2;\r\n        status = 'Winner ' + winner;\r\n        this.stopTimer1();\r\n        this.stopTimer2();\r\n      } else {\r\n        let move =\r\n          this.state.next === 'X' ? this.state.player1 : this.state.player2;\r\n        status = 'Next Player : ' + move;\r\n        //this.props.start1();\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <h3> {status}</h3>\r\n\r\n        <TicTacToeBoard\r\n          player1={this.state.playerName1}\r\n          player2={this.state.playerName2}\r\n          next={this.state.next}\r\n          cells={this.state.cells}\r\n          win={win}\r\n          handle={this.handleCellClick}\r\n        />\r\n        <div>\r\n          <MyTable data={this.state.tableData} />\r\n        </div>\r\n        <button className=\"resetButton\" onClick={this.reset}>\r\n          Reset\r\n        </button>\r\n        <br />\r\n        <br />\r\n        <h5>Time Took by Player1</h5>\r\n        <Timer id=\"timer1\" />\r\n        <h5>Time Took by Player2</h5>\r\n        <Timer id=\"timer2\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //}\r\n  startTimer1 = () => {\r\n    id1 = setInterval(() => {\r\n      value1++;\r\n      let timer = document.getElementById('timer1');\r\n      timer.innerHTML = value1;\r\n    }, 1000);\r\n  };\r\n  startTimer2 = () => {\r\n    id2 = setInterval(() => {\r\n      value2++;\r\n      let timer = document.getElementById('timer2');\r\n      timer.innerHTML = value2;\r\n    }, 1000);\r\n  };\r\n  stopTimer1 = () => {\r\n    clearInterval(id1);\r\n  };\r\n  stopTimer2 = () => {\r\n    clearInterval(id2);\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          {this.state.isGame === false\r\n            ? this.renderInput()\r\n            : this.renderContent()}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction MyTable(props) {\r\n  return (\r\n    <div className=\"table\">\r\n      <table className=\"table table-dark\">\r\n        <tr>\r\n          <th>S.No</th>\r\n          <th>Player</th>\r\n          <th>Index</th>\r\n        </tr>\r\n        {props.data.map((row) => {\r\n          return (\r\n            <tr>\r\n              <td>{row.position}</td>\r\n              <td>{row.next === 'X' ? row.player1 : row.player2}</td>\r\n              <td>{row.serialNum}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\nlet values = { TicTacToeGame };\r\nexport default values;\r\n","import React from \"react\";\r\nimport Cell from \"./BoardCell\";\r\nimport values from \"./TicTacToeGame\";\r\n\r\n//let tableData=[];\r\nclass TicTacToeBoard extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"board\">\r\n          {this.props.cells.map((value, index) => (\r\n            <Cell\r\n              id={index}\r\n              value={value}\r\n              onCellClick={this.props.handle}\r\n              onWinner={this.props.win ? this.props.win.array : null}\r\n            />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TicTacToeBoard;\r\n","import React, { Component } from \"react\";\r\n\r\nclass InputPlayer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      player: \"\",\r\n    };\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({ player: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inputName\">\r\n        <label>{this.props.label}</label>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          value={this.state.player}\r\n          onChange={this.handleChange}\r\n          required\r\n        ></input>\r\n        <br />\r\n        <button\r\n          onClick={() =>\r\n            this.props.handleName(this.state.player, this.props.label)\r\n          }\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputPlayer;\r\n","import React from \"react\";\r\n\r\nconst Timer = (props) => {\r\n  let style = {\r\n    border: \"1px solid black\",\r\n    heigth: \"20px\",\r\n    width: \"50px\",\r\n    textAlign: \"center\",\r\n    // position:'static',\r\n    // top:'500px',\r\n    // right:'200px',\r\n    margin: \"20px\",\r\n    top: \"500px\",\r\n    borderRadius: \"5px\",\r\n  };\r\n  return (\r\n    <div>\r\n      <p style={style} id={props.id}>\r\n        0\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\nexport default Timer;\r\n","//import logo from './logo.svg';\nimport \"./App.css\";\nimport AppHeader from \"./components/AppHeader\";\nimport values from \"./components/TicTacToeGame\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div>\n      <AppHeader />\n      <values.TicTacToeGame />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './components/style.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <>\n    <App />\n    </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}